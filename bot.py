from aiogram import Bot, types, Dispatcher, executor
from config import TOKEN
from keyboards import kb_client_settings, kb_client_menu, kb_client_review
from aiogram.types import ReplyKeyboardRemove
from inline import keyboard
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# import client

storage = MemoryStorage()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)
# client.register_handlers_client(dp)


async def on_startup(_):
    print("–Ø –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!")


HELP_MESSAGE = """–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –º–∞–≥–∞–∑–∏–Ω–æ–º –ø–æ –ø—Ä–æ–¥–∞–∂–µ –æ–±—É–≤–∏
–í —Ä–∞–∑–¥–µ–ª–µ '–ö–∞—Ç–∞–ª–æ–≥' –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
–í —Ä–∞–∑–¥–µ–ª–µ '–ö–æ—Ä–∑–∏–Ω–∞' –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –í–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
–í —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å –∏ –≥–æ—Ä–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö—Å—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
–í —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–∫–∞–∑—ã' –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –í–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
–í —Ä–∞–∑–¥–µ–ª–µ '–û—Ç–∑—ã–≤—ã' –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ xxx@example.com"""

my_list = HELP_MESSAGE.split('\n')

result = ""
for item in my_list:
    result += f"\u2022 {item}\n"


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ 'StivalettoShop'!", reply_markup=kb_client_menu)


@dp.message_handler(commands=['help'])
async def process_start_command(message: types.Message):
    await message.delete()
    await message.answer(text=result)


@dp.message_handler(lambda message: message.text in ['üì¶–ö–∞—Ç–∞–ª–æ–≥', '‚ÑπÔ∏è–ü–æ–º–æ—â—å', 'üõí–ö–æ—Ä–∑–∏–Ω–∞', 'üìù–ó–∞–∫–∞–∑—ã', '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üí¨–û—Ç–∑—ã–≤—ã'])
async def keyboard_handler_menu(message: types.Message):
    match message.text:
        case "üì¶–ö–∞—Ç–∞–ª–æ–≥":
            await message.delete()
            await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–∞—Ç–∞–ª–æ–≥", reply_markup=keyboard)
        case "‚ÑπÔ∏è–ü–æ–º–æ—â—å":
            await message.delete()
            await message.answer(text=result, reply_markup=ReplyKeyboardRemove())
        case "üõí–ö–æ—Ä–∑–∏–Ω–∞":
            await message.delete()
            await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ—Ä–∑–∏–Ω–∞")
        case "üìù–ó–∞–∫–∞–∑—ã":
            await message.delete()
            await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–∫–∞–∑—ã")
        case "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await message.delete()
            await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=kb_client_settings)
        case "üí¨–û—Ç–∑—ã–≤—ã":
            await message.delete()
            await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–∑—ã–≤—ã", reply_markup=kb_client_review)


@dp.message_handler(lambda message: message.text in['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤'])
async def keyboard_handler_review(message: types.Message):
    match message.text:
        case '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã':
            await message.answer('–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–∑—ã–≤—ã')
        case '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤':
            await message.answer('–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤')

@dp.message_handler(lambda message: message.text in ['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ê–¥—Ä–µ—Å', '–ù–∞–∑–∞–¥'])
async def keyboard_handler_settings(message: types.Message):
    match message.text:
        case "–ò–º—è":
            await message.delete()
            await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ò–º—è")
            username = message.from_user.first_name
            await message.answer(f"–í–∞—à–µ –∏–º—è: {username}\n"
                                 "–•–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å? –¢–æ–≥–¥–∞ –∑–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ: ")
            # @dp.message_handler()
            # async def help(message: types.Message):
            #     username = message.text
            #     await message.answer(f'–ù–æ–≤–æ–µ –∏–º—è: {username}', reply_markup=kb_client_settings)
        case "–¢–µ–ª–µ—Ñ–æ–Ω":
            await message.delete()
            await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω")
        case "–ê–¥—Ä–µ—Å":
            await message.delete()
            await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ê–¥—Ä–µ—Å")
        case "–ù–∞–∑–∞–¥":
            await message.delete()
            await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb_client_menu)


@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 3'])
async def process_category(callback_query: types.CallbackQuery):
    category = callback_query.data
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.reply(f'–≠—Ç–æ {category}!')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
